<?php
namespace Moto; use Moto; use Zend; class Hook { const SYSTEM_BOOTSTRAP_BEFORE = 'system.bootstrap:before'; const SYSTEM_BOOTSTRAP = 'system.bootstrap'; const SYSTEM_BOOTSTRAP_AFTER = 'system.bootstrap:after'; const SYSTEM_SHUTDOWN = 'system.shutdown'; const USER_DELETE = 'user.delete'; const CACHE_CLEAN = 'cache.clean'; const SYSTEM_RESPONSE_RENDER = 'system.response.echo'; const DATABASE_SETTINGS_UPDATED = 'database:settings.updated'; const BOOTSTRAPPING_JSONRPC_SERVER = 'bootstrapping: JsonRpcServer'; const BOOTSTRAPPED_JSONRPC_SERVER = 'bootstrapped: JsonRpcServer'; const BOOTSTRAPPED_LESS_COMPILER = 'bootstrapped: LessCompiler'; const JSONRPC_SERVER_SET_REQUEST = 'JsonRpcServer: setRequest'; const JSONRPC_SERVER_SET_BATCH_REQUEST = 'JsonRpcServer: setBatchRequest'; const JSONRPC_SERVER_DISPATCH = 'JsonRpcServer: dispatch'; const JSONRPC_SERVER_DISPATCHED = 'JsonRpcServer: dispatched'; const INPUT_FILTER_CREATED = 'InputFilter: created'; const RENDER_FILTER__PAGE_HTML_CONTENT = 'Render.filter:page_html_content'; const RENDER_NAMESPACE = 'Render: '; const RENDER_ADMIN_APPLICATION_PLUGINS = 'Render: admin.application.plugins'; const RENDER_ADMIN_HEAD_TOP = 'Render: admin.head.top'; const RENDER_ADMIN_BODY_TOP = 'Render: admin.body.top'; const RENDER_ADMIN_BODY_BOTTOM = 'Render: admin.body.bottom'; const RENDER_GUEST_APPLICATION_PLUGINS = 'Render: guest.application.plugins'; const RENDER_GUEST_HEAD_TOP = 'Render: guest.head.top'; const RENDER_GUEST_BODY_TOP = 'Render: guest.body.top'; const RENDER_GUEST_BODY_BOTTOM = 'Render: guest.body.bottom'; const RENDER_WEBSITE_APPLICATION_PLUGINS = 'Render: website.application.plugins'; const RENDER_WEBSITE_HEAD_TOP = 'Render: website.head.top'; const RENDER_WEBSITE_HEAD_BOTTOM = 'Render: website.head.bottom'; const RENDER_WEBSITE_BODY_TOP = 'Render: website.body.top'; const RENDER_WEBSITE_BODY_BOTTOM = 'Render: website.body.bottom'; const WEBSITE_STYLES_FILE_SAVED = 'WebsiteStylesFile:saved'; const RENDER_HEAD_TOP = 'Render: head.top'; const RENDER_HEAD_BOTTOM = 'Render: head.bottom'; const RENDER_BODY_TOP = 'Render: body.top'; const RENDER_BODY_BOTTOM = 'Render: body.bottom'; const DATABASE_PAGE_CREATING = 'database:page.creating'; const DATABASE_PAGE_CREATED = 'database:page.created'; const DATABASE_PAGE_UPDATING = 'database:page.updating'; const DATABASE_PAGE_UPDATED = 'database:page.updated'; const DATABASE_PAGE_SAVING = 'database:page.saving'; const DATABASE_PAGE_SAVED = 'database:page.saved'; const DATABASE_PAGE_DELETING = 'database:page.deleting'; const DATABASE_PAGE_DELETED = 'database:page.deleted'; const MEDIA_LIBRARY_ITEM_DELETING = 'MediaLibrary:item.deleting'; const MEDIA_LIBRARY_ITEM_DELETED = 'MediaLibrary:item.deleted'; const WIDGET_FACTORY__BOOTED = 'WidgetFactory:booted'; const WIDGET_FACTORY__NAME_TO_CLASS = 'WidgetFactory:nameToClass'; const WIDGET_FACTORY__NEED_RESOLVE_WIDGET = 'WidgetFactory:widget.needResolve'; const WIDGET_FACTORY__WIDGET_BOOTSTRAP = 'WidgetFactory:widget.bootstrap'; const WIDGET_AUTO_LOADER__LOAD_CLASS = 'WidgetAutoLoader:loadClass'; const PLUGIN_AUTO_LOADER__LOAD_CLASS = 'PluginAutoLoader:loadClass'; const TWIG_ENGINE__BOOTED = 'TwigEngine:booted'; const TWIG_ENGINE_STRING__BOOTED = 'TwigEngine.string:booted'; const TWIG_ENGINE_ADMIN__BOOTED = 'TwigEngine.admin:booted'; const TWIG_ENGINE_WEBSITE__BOOTED = 'TwigEngine.website:booted'; const TWIG_ENGINE_LESS__BOOTED = 'TwigEngine.less:booted'; const SYSTEM_MAILER__TRANSPORT_PARAMS = 'SystemMailer:transport.params'; const SYSTEM_MAILER__TRANSPORT_CREATED = 'SystemMailer:transport.created'; const SYSTEM_MAILER__MESSAGE_PARAMS = 'SystemMailer:message.params'; const SYSTEM_MAILER__MESSAGE_SENDING = 'SystemMailer:message.sending'; const SITEMAP_GENERATING = 'Sitemap:generating'; const SITEMAP_GENERATED = 'Sitemap:generated'; const SITEMAP_CHECK_DEPENDENCIES = 'Sitemap:checkDependencies'; const SITEMAP_WEBSITE_URLS = 'Sitemap:websiteUrls'; const SITEMAP_WEBSITE_URLS_WHERE_CONDITION = 'Sitemap:websiteUrlsWhereCondition'; const SITEMAP_WEBSITE_CONTENT_TAXONOMY_QUERY = 'Sitemap:websiteContentTaxonomyQuery'; const SITEMAP_EXTERNAL_SITEMAPS_LIST = 'Sitemap:externalSitemapsList'; const _PRIORITY_DEFAULT = 50; protected static $_eventManager = null; protected static $_initialized = false; protected static $_onceMap = array(); protected static $_alias = array( 'application.plugins' => 'Render: admin.application.plugins', 'render.admin.head.top' => 'Render: admin.head.top', 'guest.plugins' => 'Render: guest.application.plugins', 'render.guest.head.top' => 'Render: guest.head.top', 'website.plugins' => 'Render: website.application.plugins', 'render.website.head.top' => 'Render: website.head.top', 'website_head_bottom' => 'Render: website.head.bottom', 'website_body_top' => 'Render: website.body.top', 'website_body_bottom' => 'Render: website.body.bottom', 'system.response.echo' => 'system.response.echo', ); public static function init() { if (static::$_initialized) { return; } static::$_initialized = true; static::on(static::USER_DELETE, 'Moto\Application\Pages\Service::eventUserDeleteHandler'); static::on(static::CACHE_CLEAN, 'Moto\Cache::onCacheClean'); static::on(static::CACHE_CLEAN, 'Moto\Render::onCacheClean'); static::on(static::DATABASE_SETTINGS_UPDATED, 'Moto\System\Settings::onUpdated'); static::on(static::DATABASE_SETTINGS_UPDATED, 'Moto\Website\Settings::onUpdated'); } protected static function _sanitizeHookName($name) { if (is_array($name)) { foreach ($name as $i => $value) { $name[$i] = static::_sanitizeHookName($value); } return $name; } if (!is_string($name)) { return $name; } $name = trim($name); if (array_key_exists($name, static::$_alias)) { $name = static::$_alias[$name]; } return $name; } public static function on($hookName, $callback, $priority = null) { $result = null; try { if (null === $priority) { $priority = static::_PRIORITY_DEFAULT; } $hookName = static::_sanitizeHookName($hookName); $result = static::getEventManager()->attach($hookName, $callback, $priority); } catch(\Exception $e) { Moto\System\Log::error('Moto\Hook::on', array('hook' => $hookName, 'callback' => $callback, 'code' => $e->getCode(), 'message' => $e->getMessage())); } return $result; } public static function once($event, $callback = null, $priority = null) { if (!is_string($callback)) { return false; } $event = static::_sanitizeHookName($event); if (!array_key_exists($event, static::$_onceMap)) { static::$_onceMap[$event] = array(); } if (array_key_exists($callback, static::$_onceMap[$event])) { return static::$_onceMap[$event][$callback]; } $callbackHandler = static::on($event, $callback, $priority); static::$_onceMap[$event][$callback] = $callbackHandler; return $callbackHandler; } public static function trigger($hookName, $value = null) { try { $args = func_get_args(); $args = array_slice($args, 2); $hookName = static::_sanitizeHookName($hookName); return static::getEventManager()->filter($hookName, $value, $args); } catch (Moto\EventManager\EventException $e) { if (Moto\System::isDevelopmentStage()) { Moto\System\Log::debug('Moto\Hook::trigger catch EventException', array('hook' => $hookName, 'value' => $value, 'code' => $e->getCode(), 'message' => $e->getMessage())); } throw $e; } catch (\Exception $e) { Moto\System\Log::error('Moto\Hook::trigger', array('hook' => $hookName, 'value' => $value, 'code' => $e->getCode(), 'message' => $e->getMessage())); } return $value; } public static function getEventManager() { if (null == static::$_eventManager) { static::$_eventManager = new Moto\EventManager\EventManager(); } return static::$_eventManager; } } 