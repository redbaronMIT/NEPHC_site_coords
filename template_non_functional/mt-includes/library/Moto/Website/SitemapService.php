<?php
namespace Moto\Website; use Moto; use Zend\Db\Sql\Where as SqlWhere; class SitemapService { static protected $_primaryFile = '@primarySitemapFile'; protected static $_contentPreferences; protected static $_contentPreferencesByType; public static function getPrimaryFilePath() { return Moto\System::getAbsolutePath(static::$_primaryFile); } public static function getPrimaryFileUrl() { return Moto\System::getAbsoluteUrl(static::$_primaryFile); } public static function isPrimaryFileExists() { return file_exists(static::getPrimaryFilePath()); } public static function getPrimaryFileInformation() { $path = static::getPrimaryFilePath(); $result = array( 'url' => static::getPrimaryFileUrl(), 'exists' => static::isPrimaryFileExists(), 'last_modified' => null, 'is_writable' => null, ); if ($result['exists']) { $result['last_modified'] = date('Y-m-d H:i:s', filemtime($path)); $result['is_writable'] = is_writable($path); } return $result; } public static function getSettings() { return Moto\Website\Settings::get('sitemap_settings', array('external_sitemaps' => array(), 'content_preferences' => static::getDefaultContentPreferences())); } public static function saveSettings($settings) { if (!is_array($settings)) { return false; } if (empty($settings['content_preferences'])) { $settings['content_preferences'] = static::getDefaultContentPreferences(); } Moto\Website\Settings::add('sitemap_settings', $settings, 'array'); return true; } public static function getFailedDependency() { $dependency = array(); $path = static::getPrimaryFilePath(); $dir = dirname($path); if (file_exists($path)) { if (!is_writable($path)) { $dependency[] = 'PRIMARY_FILE_NOT_WRITABLE'; } } elseif (!is_writable($dir)) { $dependency[] = 'WEBSITE_DIR_NOT_WRITABLE'; } $dir = Moto\System::getAbsolutePath('@additionalSitemapsDir'); if (!is_writable($dir)) { $dependency[] = 'ADDITIONAL_SITEMAP_DIR_NOT_WRITABLE'; } $dependency = Moto\Hook::trigger(Moto\Hook::SITEMAP_CHECK_DEPENDENCIES, $dependency); return count($dependency) ? $dependency : null; } protected static function _checkDependency() { $dependency = static::getFailedDependency(); if (is_array($dependency) && count($dependency)) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_FAILED_DEPENDENCY_MESSAGE, Moto\System\Exception::ERROR_FAILED_DEPENDENCY_CODE, $dependency); } return true; } public static function getDefaultContentPreferences() { return array( [ 'type' => '@main_page', 'priority' => '1.0', 'frequency' => null, ], [ 'type' => 'page', 'priority' => '0.8', 'frequency' => null, ], [ 'type' => 'blog.index', 'priority' => '0.8', 'frequency' => null, ], [ 'type' => 'blog.post', 'priority' => '0.5', 'frequency' => null, ], ); } public static function getContentPreferences($type = null) { if (static::$_contentPreferences === null) { static::$_contentPreferences = array(); static::$_contentPreferencesByType = array(); $preferences = Moto\Util::getValue(static::getSettings(), 'content_preferences'); if (!is_array($preferences)) { $preferences = static::getDefaultContentPreferences(); } $preferences = (array) $preferences; foreach ($preferences as $preference) { $preferenceType = Moto\Util::getValue($preference, 'type'); if (!is_string($preferenceType) || empty($preferenceType) || array_key_exists($preferenceType, static::$_contentPreferencesByType)) { continue; } static::$_contentPreferencesByType[$preferenceType] = $preference; } } if ($type === null) { return static::$_contentPreferences; } return array_key_exists($type, static::$_contentPreferencesByType) ? static::$_contentPreferencesByType[$type] : null; } public static function fillUrlFromPage($entity) { if (!($entity instanceof Moto\Application\Pages\PageModel)) { return null; } $type = Moto\Util::getValue($entity, 'type'); if ($entity->isMainPage()) { $type = '@main_page'; } $item = static::getContentPreferences($type); return array( 'url' => $entity->getAbsoluteUrl(), 'updated_at' => $entity->modified, 'priority' => Moto\Util::getValue($item, 'priority', '0.5'), 'frequency' => Moto\Util::getValue($item, 'frequency'), ); } public static function fillUrlFromTaxonomy($entity) { if (!($entity instanceof Moto\Database\ContentTaxonomy)) { return null; } $type = Moto\Util::getValue($entity, 'type'); $item = static::getContentPreferences($type); return array( 'url' => $entity->getAbsoluteUrl(), 'updated_at' => $entity->updated_at, 'priority' => Moto\Util::getValue($item, 'priority', '0.5'), 'frequency' => Moto\Util::getValue($item, 'frequency'), ); } public static function getPublicWebsiteUrls() { $result = array(); $table = Moto\System::getDbTable('pages'); $table->useResultAsModel(true); $where = new SqlWhere(); $tempWhere = new SqlWhere(); $tempWhere->addPredicates(array( 'type' => array('page', 'blog.post'), 'status' => 'publish', 'visibility' => 'public', 'is_system' => 0, )); $tempWhere->lessThan('published', date('Y-m-d H:s:i')); $where->addPredicate($tempWhere, SqlWhere::COMBINED_BY_OR); $tempWhere = new SqlWhere(); $tempWhere->addPredicates(array( 'type' => 'blog.index', 'status' => 'publish', 'visibility' => 'public', )); $where->addPredicate($tempWhere, SqlWhere::COMBINED_BY_OR); Moto\Hook::trigger(Moto\Hook::SITEMAP_WEBSITE_URLS_WHERE_CONDITION, $where); $select = $table->createSelect(); $select->where($where); $select->order(array('id' => 'ASC')); $items = $table->selectWith($select); foreach ($items as $item) { if ($item->getPageType()->isTemplate()) { continue; } if (Moto\Util::getValue($item->properties, 'meta.canonical_url')) { continue; } if (Moto\Util::getValue($item->properties, 'meta.noindex')) { continue; } $record = static::fillUrlFromPage($item); if ($record) { if ($item->isMainPage()) { array_unshift($result, $record); } else { $result[] = $record; } } } $query = Moto\Database\ContentTaxonomy::query(); Moto\Hook::trigger(Moto\Hook::SITEMAP_WEBSITE_CONTENT_TAXONOMY_QUERY, $query); $items = $query->get(); foreach ($items as $item) { if (Moto\Util::getValue($item->properties, 'meta.canonical_url')) { continue; } if (Moto\Util::getValue($item->properties, 'meta.noindex')) { continue; } $record = static::fillUrlFromTaxonomy($item); if ($record) { $result[] = $record; } } $result = Moto\Hook::trigger(Moto\Hook::SITEMAP_WEBSITE_URLS, $result); return $result; } public static function generateAll() { static::_checkDependency(); Moto\ClickAction\AbstractClickAction::setUsingPermalinks(Moto\Website\Settings::get('permalinks')); Moto\ClickAction\AbstractClickAction::setUsingHtmlSuffix(Moto\Website\Settings::get('suffix')); Moto\Hook::trigger(Moto\Hook::SITEMAP_GENERATING); $settings = static::getSettings(); $sitemap = new Sitemap\UrlSetFile(); $sitemap->setFileName('@additionalSitemapsDir/website.xml'); $records = static::getPublicWebsiteUrls(); foreach ($records as $record) { $lastmod = $record['updated_at']; if (!empty($lastmod)) { $lastmod = explode(' ', $lastmod); $lastmod = $lastmod[0]; } $sitemap->addLocation($record['url'], array( 'lastmod' => $lastmod, 'priority' => $record['priority'], 'changefreq' => $record['frequency'], )); } $sitemap->write(); $indexFile = new Sitemap\IndexFile(); $indexFile->setFileName(static::$_primaryFile); $indexFile->addLocation($sitemap->getAbsoluteFileUrl(), array( 'lastmod' => $sitemap->getModificationTime('Y-m-d'), )); try { $externals = Moto\Util::getValue($settings, 'external_sitemaps'); $sitemap = new Sitemap\IndexFile(); $sitemap->setFileName('@additionalSitemapsDir/externals.xml'); $filter = new Moto\Filter\UriNormalize(array( 'removeFragment' => true, 'escapePath' => true, 'escapeQuery' => true, )); if (is_array($externals)) { foreach ($externals as $url) { $url = $filter->filter($url); $sitemap->addLocation($url); } } $externals = Moto\Hook::trigger(Moto\Hook::SITEMAP_EXTERNAL_SITEMAPS_LIST, array()); if (is_array($externals)) { foreach ($externals as $url) { $url = $filter->filter($url); $sitemap->addLocation($url); } } if ($sitemap->isEmpty()) { $sitemap->delete(); } else { $sitemap->write(); $indexFile->addLocation($sitemap->getAbsoluteFileUrl(), array( 'lastmod' => $sitemap->getModificationTime('Y-m-d'), )); } } catch (\Exception $e) { if (Moto\System::isDevelopmentStage()) { Moto\System\Log::emergency(__CLASS__ . '::' . __FUNCTION__ . ' catch Exception', array( 'code' => $e->getCode(), 'message' => $e->getMessage(), 'class' => get_class($e), )); } } $indexFile->write(); Moto\Hook::trigger(Moto\Hook::SITEMAP_GENERATED); } } 