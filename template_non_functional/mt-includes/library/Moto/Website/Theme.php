<?php
namespace Moto\Website; use Moto; use Zend\EventManager\Event; use Zend\Stdlib\ArrayUtils; class Theme { const INFO_FILE = 'theme.json'; protected static $_defaultValues = array( 'headings' => array( 'type' => 'object', 'value' => array( 'heading1' => '0.67em', 'heading2' => '0em', 'heading3' => '0em', 'heading4' => '0em', ) ) ); protected static $_themesInfo = array(); protected static $_initialized = false; protected static $_options = array(); public static function setOption($name, $value) { static::$_options[$name] = $value; } public static function getOption($name, $default = null) { return Moto\Util::getFrom(static::$_options, $name, $default); } public static function init() { if (static::$_initialized) { return; } static::$_initialized = true; static::updateCurrentTheme(); } public static function updateCurrentTheme($name = null) { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } Moto\System::setPath('currentTheme', Moto\System::getPath('themes') . '/' . $name); } public static function activate($name, $mode = 'unknown') { $name = ($name instanceof Event ? $name->getTarget() : $name); static::deactivate(); Moto\Website\Settings::set('theme', $name); static::updateCurrentTheme($name); static::importFeatures($name); static::importColorTheme($name); static::importBackgrounds($name); static::importFonts($name); static::importTextStyles($name, $mode); static::importSpacings($name); static::importGridOptions($name); static::importHeadingSpacings($name); static::importPresetsEditKeys($name); static::importPresets($name, $mode); static::importCommonPresets($name); Moto\System\Style::rebuildAll(); return true; } public static function deactivate() { Moto\Features::disableByMask('theme'); } public static function getInfo($name = null) { if (null === $name) { $name = Moto\Website\Settings::get('theme'); } if (!array_key_exists($name, static::$_themesInfo)) { $infoFile = Moto\System::getAbsolutePath('@themes/' . $name . '/' . static::INFO_FILE); if (file_exists($infoFile)) { $info = file_get_contents($infoFile); static::$_themesInfo[$name] = json_decode($info, true); } } return (array_key_exists($name, static::$_themesInfo) ? static::$_themesInfo[$name] : null); } public static function getFeatures($name = null, $default = null) { $info = static::getInfo($name); if (array_key_exists('features', $info)) { return $info['features']; } return $default; } public static function importFeatures($name = null) { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $features = static::getFeatures($name); Moto\Features::enable($features); } public static function importColorTheme($name = null) { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/colors.json'); if (!is_file($file)) { return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (empty($data)) { return false; } Moto\Application\Styles\Service::setColorTheme($data); return true; } public static function importSpacings($name = null, $mode = 'activate') { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/values.json'); if (!is_file($file)) { return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (empty($data) || empty($data['spacings'])) { return false; } if ($mode === 'activate') { Moto\Application\Theme\Service::setSpacings($data['spacings']); } return true; } public static function importGridOptions($name = null, $mode = 'activate') { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/values.json'); if (!is_file($file)) { return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (empty($data) || empty($data['grid'])) { return false; } if ($mode === 'update') { $currentValue = Moto\Application\Theme\Service::getGridOptions(); if (is_object($currentValue)) { $currentValue = json_decode(json_encode($currentValue), true); } $data['grid'] = ArrayUtils::merge($data['grid'], $currentValue); } try { Moto\Application\Theme\Service::setGridOptions($data['grid']); } catch (Moto\Exception $e) { Moto\System\Log::critical('COMMON.ERROR.THEME_ACTIVATION_FAILED:BAG_GRID_OPTIONS', array('theme' => $name, 'errors' => $e->getErrors())); throw $e; } return true; } public static function importHeadingSpacings($name = null, $mode = 'activate') { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/values.json'); if (!is_file($file)) { return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (empty($data) || empty($data['headings'])) { return false; } if ($mode === 'update') { $currentValue = Moto\Application\Theme\Service::getHeadingSpacings(); if (is_object($currentValue)) { $currentValue = json_decode(json_encode($currentValue), true); } $data['headings'] = ArrayUtils::merge($data['headings'], $currentValue); } try { Moto\Application\Theme\Service::setHeadingSpacings($data['headings']); } catch (Moto\Exception $e) { Moto\System\Log::critical('COMMON.ERROR.THEME_ACTIVATION_FAILED:BAD_HEADING_SPACINGS', array('theme' => $name, 'errors' => $e->getErrors())); throw $e; } return true; } public static function importPresetsEditKeys($name = null) { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/config.json'); if (!is_file($file)) { Moto\Website\Settings::set('theme_presets', '{}'); return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (!$data || empty($data) || empty($data['presets'])) { Moto\Website\Settings::set('theme_presets', '{}'); return false; } Moto\Website\Settings::set('theme_presets', $data['presets']); return true; } public static function importBackgrounds($name = null) { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/backgrounds.json'); if (!is_file($file)) { return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (empty($data)) { return false; } $table = new Moto\Application\Styles\StylesTable(); $table->useResultAsModel(true); foreach ($data as $background) { if (!array_key_exists('class_name', $background)) { continue; } if (array_key_exists('id', $background)) { unset($background['id']); } if (array_key_exists('name', $background)) { unset($background['name']); } $item = $table->getByClassName($background['class_name']); if (!$item) { continue; } $item->setFromArray($background); $table->save($item); } return true; } public static function importFonts($name = null) { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/fonts.json'); if (!is_file($file)) { return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (empty($data)) { return false; } $table = new Moto\Application\Fonts\FontsTable(); $table->useResultAsModel(true); try { $update = $table->createUpdateObject(); $update->set(array('is_protected' => 0)); $table->updateWith($update); } catch (\Exception $e) { } foreach ($data as $font) { if (!array_key_exists('family', $font)) { continue; } if (empty($font['name'])) { $font['name'] = $font['family']; } if (!empty($font['lastModified']) && empty($font['last_modified'])) { $font['last_modified'] = $font['lastModified']; } if (!empty($font['provider']) && $font['provider'] === 'google' && !strpos($font['family'], ',') && !empty($font['category'])) { $font['family'] = "'$font[family]', $font[category]"; } if (empty($font['is_protected'])) { $font['is_protected'] = 1; } $item = $table->getByName($font['name']); if (!$item) { $item = $table->create(); } $item->setFromArray($font); $table->save($item); } return true; } public static function importTextStyles($name = null, $mode = 'install') { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/text-styles.json'); if (!is_file($file)) { return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (empty($data)) { return false; } $table = new Moto\Application\Styles\StylesTable(); $table->useResultAsModel(true); $normal = null; $default = array( 'is_responsive' => 0, 'properties' => array( 'desktop' => array( 'base' => array( 'font-weight' => '400', 'font-style' => 'normal', ), ) ), 'link' => array( 'desktop' => array( 'base' => array( 'font-weight' => '400', 'font-style' => 'normal', ), 'hover' => array( 'font-weight' => '400', 'font-style' => 'normal', ), ) ), ); $nameIsRewritable = ($mode === 'install'); foreach ($data as $style) { if (!array_key_exists('class_name', $style)) { continue; } if (array_key_exists('id', $style)) { unset($style['id']); } if (!$nameIsRewritable) { unset($style['name']); } $item = $table->getByClassName($style['class_name']); if (!$item) { continue; } $item->is_responsive = 0; if ($normal && $style['class_name'] !== $normal['class_name']) { if (!empty($normal['properties'])) { $style['properties'] = ArrayUtils::merge($normal['properties'], $style['properties']); } if (!empty($normal['link'])) { $style['link'] = ArrayUtils::merge($normal['link'], $style['link']); } } if ($style['class_name'] === 'moto-text_normal') { $style['properties'] = ArrayUtils::merge($default['properties'], $style['properties']); } $item->setFromArray($style); $table->save($item); if ($style['class_name'] === 'moto-text_normal') { $normal = $style; } } return true; } public static function importPresets($name = null, $mode = 'install') { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } $isUpdate = ($mode === 'update'); $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(true); if (!$isUpdate) { $table->delete(array( 'is_system' => 1 )); } $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/presets.json'); if (!is_file($file)) { return false; } $data = file_get_contents($file); $data = json_decode($data, true); if (!$data || empty($data)) { return false; } foreach ($data as $preset) { if (!array_key_exists('class_name', $preset)) { continue; } if (!array_key_exists('widget_name', $preset)) { continue; } $preset['class_name'] = trim($preset['class_name']); $preset['widget_name'] = trim($preset['widget_name']); if (!empty($preset['is_system']) && $preset['is_system'] && preg_match('/^moto-preset-(.+)$/', $preset['class_name'], $match)) { $name = trim($match[1]); if ($name === 'default') { $name = '1'; } $name = 'Preset ' . $name; $preset['name'] = $name; } if ($isUpdate && ($item = $table->getWidgetPreset($preset['widget_name'], $preset['class_name']))) { $current = json_decode($item->properties, true); $mergedProperties = ArrayUtils::merge($preset['properties'], $current); $item->properties = json_encode($mergedProperties); } else { $item = $table->create($preset); } $table->save($item); } return true; } public static function importCommonPresets() { Moto\Update\Upgrade::checkAndCreateAudioPlayerPreset(); Moto\Update\Upgrade::checkAndCreateCountdownPresets(); Moto\Update\Upgrade::checkAndCreateAccordionPresets(); Moto\Update\Upgrade::checkAndCreateSocialLinksExtendedPresets(); Moto\Update\Upgrade::upgradeBackToTopButton(); Moto\Update\Upgrade::checkAndCreateTabsPresets(); Moto\Update\Upgrade::checkAndCreateCookieNotificationPresets(); Moto\Update\Upgrade::upgradeTabsPresetsForVerticalMode(); Moto\Update\Upgrade::checkAndCreateTileGalleryPresets(); Moto\Update\Upgrade::checkAndCreateTagListPresets(); Moto\Update\Upgrade::checkAndCreateCategoryListPresets(); if (Moto\Features::isEnabled('theme_content_blog')) { $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(true); $preset = $table->getWidgetPreset('pagination', 'moto-preset-default'); if (!$preset) { $preset = $table->create(array( 'name' => 'Pagination 1', 'widget_name' => 'pagination', 'class_name' => 'moto-preset-default', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"pagination":{"desktop":{"base":{"font-family":"tahoma, arial, helvetica, sans-serif","font-style":"normal","font-weight":"400","font-size":"14px"}}},"item":{"desktop":{"base":{"margin-right":"5px"}}},"item_link_active":{"desktop":{"base":{"font-style":"normal","font-weight":"700","color":"#2e3a46","background-color":"","border-color":"transparent","text-decoration":"none"}}},"item_link":{"desktop":{"base":{"color":"#81868c","background-color":"transparent","border-color":"transparent","border-width":"1px","border-radius":"0%","border-style":"solid","text-decoration":"none","width":"31px","height":"31px"},"hover":{"color":"#d3d8db","background-color":"","border-color":"","text-decoration":""}}}}', 'template' => 'default', )); try { $table->save($preset); } catch (\Exception $e) { } } } } public static function importContentSections($name = null, $types = array('blog')) { if (empty($name)) { $name = Moto\Website\Settings::get('theme'); } if (!is_array($types)) { $types = array($types); } $config = array(); $file = Moto\System::getAbsolutePath('@themes/' . $name . '/settings/config.json'); if (is_file($file)) { $config = file_get_contents($file); $config = json_decode($config, true); } foreach ($types as $type) { if (!Moto\Features::isEnabled('theme_content_' . $type)) { continue; } $helper = Moto\System\ContentSectionHelper::get($type); if ($helper->isConfigured()) { continue; } $settings = Moto\Util::getFromArrayDeep($config, 'content_section_' . $type, null); if ($settings) { unset($settings['page_id']); $helper->setDefaultSettings($settings); } $helper->checkOrInstall(); } return true; } public static function getDefaultValue($name) { $data = Moto\Util::getValue(static::$_defaultValues, $name); if (!$data) { return null; } return Moto\Util::decodeValue($data['value'], $data['type']); } } 