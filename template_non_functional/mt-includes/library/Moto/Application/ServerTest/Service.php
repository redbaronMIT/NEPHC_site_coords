<?php
namespace Moto\Application\ServerTest; use Moto\Json\Server; use Zend\Db; use Moto; class Service extends Moto\Service\AbstractStaticService { protected static $_resourceName = null; public static function isAllowed($privilege) { return true; } public static function checkRequirements() { $result = array(); $errors = array(); $requirements = new Validator\Requirements(); $phpVersion = substr(PHP_VERSION_ID, 0, 3); $phpVersionRequirements = Moto\Config::get('serverRequirements.php_version.' . $phpVersion); if (empty($phpVersionRequirements)) { $errors[] = array( 'name' => 'PHP_VERSION', 'params' => array( 'level' => 'error', 'php_version' => PHP_VERSION ), ); } else { $requirements->addValidator('php_version', $phpVersionRequirements); } $files = Moto\Config::get('serverRequirements.files'); if (!empty($files) && is_array($files)) { foreach ($files as $name => $params) { if (null === $params) { continue; } $validator = 'file_writable'; if (empty($params['name'])) { $params['name'] = $name; } if ($name[0] === '@') { $path = Moto\System::getRelativePath($name); } elseif (preg_match('/^path\.(.*)/', $name, $match)) { $path = Moto\System::getRelativePath($match[1]); } else { $path = Moto\Config::get($name); } if (empty($params['type'])) { $params['type'] = 'file'; } if (empty($path)) { $params['level'] = 'error'; $errors[] = array( 'name' => 'FILE_WRITABLE', 'params' => $params ); continue; } $params['name'] = $path; if (!empty($params['validator'])) { $validator = $params['validator']; } $requirements->addValidator($validator, $params); } } $functions = Moto\Config::get('serverRequirements.functions'); if (!empty($functions) && is_array($functions)) { foreach ($functions as $name => $params) { if (null === $params) { continue; } if (empty($params['function'])) { $params['function'] = $name; } $requirements->addValidator('php_function_exists', $params); } } $extensions = Moto\Config::get('serverRequirements.extensions'); if (!empty($extensions) && is_array($extensions)) { foreach ($extensions as $name => $params) { if (null === $params) { continue; } if (empty($params['extension'])) { $params['extension'] = $name; } $requirements->addValidator('php_extension_loaded', $params); } } $validators = Moto\Config::get('serverRequirements.validators'); if (!empty($validators) && is_array($validators)) { foreach ($validators as $validator) { if (!is_array($validator) || empty($validator['type'])) { continue; } if (empty($validator['params'])) { $validator['params'] = array(); } $requirements->addValidator($validator['type'], $validator['params']); } } $requirements->addValidator('php_session_create'); $requirements->addValidator('php_safe_mode', array('level' => 'warning')); $requirements->addValidator('mail_function', array('level' => 'warning')); $requirements->addValidator('php_upload_enabled', array('level' => 'warning')); $requirements->addValidator('php_upload_file_size', array('level' => 'warning', 'min' => Moto\Config::get('serverRequirements.php_upload_file_size'))); require_once(Moto\System::getAbsolutePath('@phpLibrary/Getid3/getid3.php')); ob_start(); $error = null; try { $getID3 = new \getID3(); } catch (\Exception $e) { $error = array( 'name' => 'DEPENDENCY_GETID3_FAILED', 'params' => array( 'level' => 'error', 'message' => $e->getMessage(), ), ); } if ($error) { $errors[] = $error; } ob_get_clean(); if (!$requirements->isValid() || !empty($errors)) { $errors = array_merge($errors, $requirements->getErrors()); throw new Server\Exception('COMMON.ERROR.TEST_FAILED', 200, $errors); } return $result; } public static function checkDataBase($request = null) { if (null === $request) $request = static::getRequest()->getParams(); $filter = new InputFilter\DataBase(); $filter->setData($request); if (!$filter->isValid()) { throw new Server\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, $filter->getMessagesKeys()); } $err = error_reporting(); error_reporting(0); $databaseConfig = array_merge(Moto\Config::get('database'), $filter->getValues()); $isConnected = false; $schema = null; try { $databaseAdapter = new Db\Adapter\Adapter($databaseConfig); $schema = $databaseAdapter->getCurrentSchema(); $isConnected = $databaseAdapter->getDriver()->getConnection()->isConnected(); } catch(\Exception $e) { switch($e->getCode()) { case 2002: $errors['hostname'] = array('cantConnect'); break; case 1049: $errors['database'] = array('notFound'); break; case 1044: case 1045: case 1227: case 1698: $errors['username'] = array('accessDenied'); $errors['password'] = array('accessDenied'); break; default: throw new Server\Exception($e->getMessage()); break; } throw new Server\Exception('COMMON.ERROR.TEST_FAILED', $e->getCode(), $errors); } error_reporting($err); return $isConnected; } }