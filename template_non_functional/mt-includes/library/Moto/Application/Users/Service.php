<?php
namespace Moto\Application\Users; use Moto\Json\Server; use Moto\Json\Request; use Moto\Json\Response; use Moto; class Service extends Moto\Service\AbstractStaticService { protected static $_resourceName = 'users'; protected static $_resourcePrivilegesMap = array( 'getList' => 'get', 'getById' => 'get', ); public static function getList($request = null) { if (null === $request) $request = static::getRequest()->getParams(); if (!($request instanceof Request\Collection)) $request = new Request\Collection($request); $table = new UserTable(); $users = $table->getUsersList($request); if (!$users) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_NOT_FOUND_MESSAGE, Moto\System\Exception::ERROR_NOT_FOUND_CODE); } $result = new Response\Collection($users); return $result; } public static function getById($id) { $id = (int)$id; $table = new UserTable(); $user = $table->getUser($id); if (!$user) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_NOT_FOUND_MESSAGE, Moto\System\Exception::ERROR_NOT_FOUND_CODE); } return $user; } public static function save($data = null) { if (null === $data) $data = static::getRequest()->getParams(); if (empty($data['id'])) { return static::_addUser($data); } else { return static::_updateUser($data); } } public static function setPassword($request = null) { if (null === $request) $request = static::getRequest()->getParams(); $filter = new ChangePasswordFilter(); $filter->setData($request); if (!$filter->isValid()) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, $filter->getMessagesKeys()); } $request = $filter->getValues(); $userTable = new UserTable(); $userTable->useResultAsModel(1); $user = $userTable->getUser($request['id']); if (!$user) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_NOT_FOUND_MESSAGE, Moto\System\Exception::ERROR_NOT_FOUND_CODE); } if (strtolower($user->role_name) === 'root') { throw new Moto\System\Exception(Moto\System\Exception::ERROR_PERMISSION_DENIED_MESSAGE, Moto\System\Exception::ERROR_PERMISSION_DENIED_CODE, array('id' => array('itsRoot'))); } $user->setPassword($request['new_password']); return $userTable->update($user); } public static function delete($request = null) { if (null === $request) $request = static::getRequest()->getParams(); $filter = new DeleteUserFilter(); $filter->setData($request); if (!$filter->isValid()) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, $filter->getMessagesKeys()); } $currentUser = Moto\Authentication\Service::getUser(); $user_id = $filter->getValue('user_id'); if (in_array($currentUser->id, $user_id)) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, array('user_id' => array('selfId'))); } $schema = $filter->getValues(); $userTable = new UserTable(); $result = true; $results = array(); $params = $schema; unset($params['user_id']); unset($params['action']); $action = $filter->getValue('action'); foreach ($schema['user_id'] as $userId) { $results[$userId] = true; $user = $userTable->getUser($userId); if (!$user) { $results[$userId] = false; continue; } $results[$userId] = $userTable->deleteUser($user, ($action == 'reassign' ? $filter->getValue('reassign_to') : null)); $result &= $results[$userId]; } return $result; } protected static function _addUser($data) { $filter = new NewUserFilter(); $filter->setData($data); if (!$filter->isValid()) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, $filter->getMessagesKeys()); } $values = $filter->getValues(); $table = new UserTable(); $user = $table->create(); $user->setFromArray($values); $result = $table->insert($user); if ($filter->getValue('send_email')) { Moto\Application\Util\Mailer::sendMailByName('usersAddNew', $user->email, array( 'user' => $user->toArray(), 'password' => $filter->getValue('password'), 'website' => array('adminUrl' => Moto\System::getAbsoluteUrl('@website/mt-admin/'))) ); } return $result; } protected static function _updateUser($data) { $filter = new SaveUserFilter(); $filter->setData($data); if (!$filter->isValid()) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, $filter->getMessagesKeys()); } $values = $filter->getValues(); $table = new UserTable(); $table->useResultAsModel(1); $user = $table->getUser($values['id']); if (!$user) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_NOT_FOUND_MESSAGE, Moto\System\Exception::ERROR_NOT_FOUND_CODE); } $currentUser = Moto\Authentication\Service::getUser(); $user_id = $filter->getValue('id'); if ($user_id == $currentUser->id) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, array('id' => array('selfId'))); } if (strtolower($user->role_name) === 'root') { throw new Moto\System\Exception(Moto\System\Exception::ERROR_PERMISSION_DENIED_MESSAGE, Moto\System\Exception::ERROR_PERMISSION_DENIED_CODE, array('id' => array('itsRoot'))); } $user->setFromArray($values); $result = $table->update($user); if (!$result) { } return $user; } public static function setStatus($request = null) { if (null === $request) $request = static::getRequest()->getParams(); $filter = new SetUserStatusFilter(); $filter->setData($request); if (!$filter->isValid()) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, $filter->getMessagesKeys()); } $currentUser = Moto\Authentication\Service::getUser(); $user_id = $filter->getValue('user_id'); if ($user_id === $currentUser->id) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, array('user_id' => array('selfId'))); } $userTable = new UserTable(); $userTable->useResultAsModel(1); $user = $userTable->getUser($user_id); if (!$user) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_NOT_FOUND_MESSAGE, Moto\System\Exception::ERROR_NOT_FOUND_CODE); } $enabled = $filter->getValue('enabled'); if (strtolower($user->role_name) === 'root' && !$enabled) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_PERMISSION_DENIED_MESSAGE, Moto\System\Exception::ERROR_PERMISSION_DENIED_CODE, array('user_id' => array('itsRoot'))); } $user->enabled = $enabled; $userTable->update($user); return $user->toArray(); } public static function changeRole($request = null) { if (null === $request) $request = static::getRequest()->getParams(); $filterBulk = new ChangeUserRoleBulkFilter(); $filterBulk->setData($request); if (!$filterBulk->isValid()) { throw new Moto\System\Exception(Moto\System\Exception::ERROR_BAD_REQUEST_MESSAGE, Moto\System\Exception::ERROR_BAD_REQUEST_CODE, $filterBulk->getMessagesKeys()); } $usersId = $filterBulk->getValue('user_id'); if (!is_array($usersId)) { $usersId = array($usersId); } $roleId = $filterBulk->getValue('role_id'); $results = array(); $userTable = new UserTable(); $userTable->useResultAsModel(1); $filter = new ChangeUserRoleFilter(); $currentUser = Moto\Authentication\Service::getUser(); for ($i = 0, $icount = count($usersId); $i < $icount; $i++) { $filter->setData(array( 'user_id' => $usersId[$i], 'role_id' => $roleId )); if (!$filter->isValid()) { $results[$usersId[$i]] = array('errors' => $filter->getMessagesKeys()); continue; } $userId = $filter->getValue('user_id'); $user = $userTable->getUser($userId); if (!$user) { $results[$usersId[$i]] = array('errors' => array('user_id' => array('noRecordFound'))); continue; } if ($user->role_id == $roleId) { $results[$usersId[$i]] = array('result' => true); continue; } if ($userId === $currentUser->id) { $results[$usersId[$i]] = array('errors' => array('user_id' => array('selfId'))); continue; } if (strtolower($user->role_name) === 'root') { $results[$usersId[$i]] = array('errors' => array('user_id' => array('itsRoot'))); continue; } $user->role_id = $roleId; $userTable->update($user); $results[$usersId[$i]] = array('result' => true); } return $results; } }