<?php
namespace Moto\Twig\Extension; use Moto; class StyleHelperExtension extends AbstractExtension { protected $_name = 'motoStyleHelper'; protected $_options = array( 'colorAsVariable' => false, ); protected $_systemColors; protected $_constants = array( 'const_media_desktop_max_width' => '100%', 'const_media_tablet_max_width' => '1039px', 'const_media_mobile-h_max_width' => '767px', 'const_media_mobile-v_max_width' => '479px', ); public function initRuntime(\Twig_Environment $environment) { parent::initRuntime($environment); $this->_systemColors = Moto\Application\Styles\Service::getColorTheme(); } public function getGlobals() { return array( 'StyleHelper' => $this ); } public function getFunctions() { return array( new \Twig_SimpleFunction('generateLessFromArray', array($this, 'generateLessFromArraySafe'), array( 'is_safe' => array( 'html', ), ) ), new \Twig_SimpleFunction('generateWidgetInlineStyles', array($this, 'generateWidgetInlineStyles'), array( 'is_safe' => array( 'html', ), ) ), new \Twig_SimpleFunction('generatePresetSelector', array($this, 'generatePresetSelectorSafe'), array( 'is_safe' => array( 'html', ), ) ), new \Twig_SimpleFunction('getSystemColor', array($this, 'getSystemColor'), array( 'is_safe' => array( 'html', ), ) ), ); } public function generateLessFromArray($property, $class = null) { return new \Twig_Markup($this->generateLessFromArraySafe($property, $class), 'UTF-8'); } public function generatePresetSelector($widgetClassName, $presetClassName = null) { return new \Twig_Markup($this->generatePresetSelectorSafe($widgetClassName, $presetClassName), 'UTF-8'); } public function getSystemColor($name, $value = null) { if (preg_match('/(base|custom)Color([0-9]+)_?([0-9]*)/', $name, $match)) { $value = Moto\Util::getValue($this->_systemColors, $match[1] . '.' . $match[2] . ($match[3] ? '.' . $match[3] : ''), $value); } return $value; } public function transformCssRuleValue($name, $value) { if ($name === 'background-image') { if ($this->isPreRenderMode()) { $value = 'url({{ Linker.img(\'' . $value . '\') }})'; } else { $value = 'url(' . Moto\System::getUploadUrl($value) . ')'; } } if (is_string($value) && $value[0] === '@' && strpos($name, 'color') !== false) { if ($this->getOption('colorAsVariable')) { return $value; } if ($this->isPreRenderMode()) { return '{{ StyleHelper.getSystemColor(\'' . $value . '\') }}'; } return $this->getSystemColor($value); } return $value; } public function generateLessFromArraySafe($property, $className = null) { $result = ''; if (empty($property)) { return $result; } if (is_string($property)) { if (is_string($className)) { $result .= $className . " {\n"; } $result .= $property; if (is_string($className)) { $result .= "\n}\n"; } return $result; } $property = (array) $property; foreach($property as $name => $value) { if (empty($value)) { continue; } if ($name === 'base') { $result .= $this->generateLessFromArraySafe($value); continue; } if ($name === 'before' || $name === 'after' || $name === 'hover') { $code = $this->generateLessFromArraySafe($value); if (!empty($code)) { $result .= '&:' . $name . " {\n"; $result .= $code; $result .= "}\n"; } continue; } if (is_array($value)) { if (array_key_exists('unicode', $value) && is_string($value['unicode'])) { $value['unicode'] = ltrim($value['unicode'], '\\'); $result .= $name . ':"\\' . $value['unicode'] . '";' . "\n"; } continue; } if (is_object($value)) { continue; } $value = $this->transformCssRuleValue($name, $value); if ($value) { $result .= $name . ':' . $value . ';' . "\n"; } } if (is_string($className) && !empty($result)) { $result = $className . " {\n" . $result . "}\n"; } return $result; } public function generateWidgetInlineStyles($styles) { if (is_string($styles)) { return $styles; } $styles = (array) $styles; $result = ''; foreach ($styles as $name => $value) { if (is_string($value) && empty($value)) { continue; } if ($name === 'background-image') { if ($this->isPreRenderMode()) { $value = 'url({{ Linker.img(\'' . $value . '\') }})'; } else { $value = 'url(' . Moto\System::getUploadUrl($value) . ')'; } } if (!is_string($value) || empty($value)) { continue; } if ($name === 'background-color' && $value[0] === '@') { continue; } if ($name === 'color' && $value[0] === '@') { continue; } $result .= $name . ':' . $value . ';'; } return $this->_returnTemplate($result); } public function generatePresetSelectorSafe($widgetClassName, $presetClassName = null) { $result = ''; if (!is_string($widgetClassName)) { Moto\System\Log::error('StyleHelper.generatePresetSelector: argument "$widgetClassName" should be a string:', array( '$widgetClassName' => $widgetClassName, '$presetClassName' => $presetClassName, ) ); return $result; } $result = $widgetClassName; if (!is_string($presetClassName)) { $presetClassName = Moto\Util::getValue($presetClassName, 'class_name', ''); } if (is_string($presetClassName) && !empty($presetClassName)) { $result .= '.' . $presetClassName; } return $result; } public function getConstant($name, $default = '') { return Moto\Util::getValue($this->_constants, $name, $default); } } 