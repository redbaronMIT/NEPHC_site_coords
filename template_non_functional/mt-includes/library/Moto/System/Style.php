<?php
namespace Moto\System; use Moto; class Style { protected static $_options = array( 'fontsPartLength' => 5 ); public static function rebuildAll($event = false) { if ($event instanceof \Zend\EventManager\Event) { $useDeferred = ($event->getName() !== Moto\Hook::SYSTEM_SHUTDOWN); } else { $useDeferred = ($event !== true); } if ($useDeferred) { Moto\Hook::once(Moto\Hook::SYSTEM_SHUTDOWN, 'Moto\System\Style::rebuildAll'); return; } Moto\System\Style::buildLessVariables(); Moto\System\Style::buildFonts(); Moto\System\Style::buildColorTheme(); Moto\System\Style::buildStyles(); Moto\System\Style::buildPresets(); Moto\System\Style::buildLess($event); } public static function buildFonts() { $table = new Moto\Application\Fonts\FontsTable(); $fonts = $table->getList(array( 'active' => '1' )); $import = array( 'google' => array( 'family' => array(), 'subsets' => array(), 'one' => array(), ) ); foreach ($fonts['records'] as $font) { if (is_array($font)) { $font = (object) $font; } if (is_string($font->active_variants)) { $font->active_variants = json_decode($font->active_variants, true); } if (is_string($font->active_subsets)) { $font->active_subsets = json_decode($font->active_subsets, true); } if ($font->provider == 'google') { $family = str_replace(' ', '+', $font->name); if (!empty($font->active_variants)) { $family .= ':' . implode(',', $font->active_variants); } $import[$font->provider]['family'][] = $family; if (!empty($font->active_subsets)) { $import[$font->provider]['subsets'] = array_merge($import[$font->provider]['subsets'], $font->active_subsets); } } } $css = "\n"; if (!empty($import['google']['family'])) { $parts = array_chunk($import['google']['family'], static::$_options['fontsPartLength']); foreach ($parts as $part) { $css .= '@import url(//fonts.googleapis.com/css?family=' . implode('|', $part); if (!empty($import['google']['subsets'])) { $import['google']['subsets'] = array_unique($import['google']['subsets']); $css .= '&subset=' . implode(',', $import['google']['subsets']); } $css .= ");\n"; } } Moto\Util::filePutContents(Moto\System::getAbsolutePath('@userFontsFile'), $css); return true; } public static function buildLessVariables($event = null) { $content = ''; if (Moto\Version::getCurrentBuild() > 26) { $content .= "@websiteAddress: '" . rtrim(Moto\System::getRelativeUrl(), '/') . "';\n"; $content .= "@websiteMediaUrl: '" . Moto\System::getRelativeUrl('@userUploads') . "';\n"; $content .= "@currentThemeDir: '" . Moto\System::getRelativePath('@currentTheme') . "';\n"; $content .= "@currentThemeUrl: '" . Moto\System::getRelativeUrl('@currentTheme') . "';\n"; } else { $websiteAddress = rtrim(Moto\Website\Settings::get('address'), '/'); $content .= "@websiteAddress: '$websiteAddress';\n"; $content .= "@websiteMediaUrl: '" . Moto\System::getAbsoluteUrl('@userUploads') . "';\n"; $currentTheme = Moto\System::getRelativePath('@currentTheme'); $content .= "@currentThemeDir: '" . $currentTheme . "';\n"; $content .= "@currentThemeUrl: '" . $websiteAddress . '/' . $currentTheme . "';\n"; } $features = Moto\Features::getList(); if (is_array($features)) { $content .= "\n"; foreach ($features as $name => $value) { if (!preg_match('/^theme_/', $name)) { continue; } $content .= "@feature_{$name}: {$value};\n"; } } if (Moto\Features::isEnabled('theme_spacings')) { $spacings = Moto\Website\Settings::get('spacings'); if (is_string($spacings)) { $spacings = json_decode($spacings, true); } if (is_array($spacings)) { $content .= "\n"; foreach ($spacings as $device => $sizes) { if (!is_array($sizes)) { continue; } foreach ($sizes as $size => $value) { if (empty($value)) { $value .= '\'\''; } else { $value = (string) $value; $value = str_replace('px', '', $value); $value .= 'px'; } $content .= "@spacing_{$device}_{$size}: {$value};\n"; } } } } $grid = Moto\Website\Settings::get('theme_grid'); if (is_array($grid)) { $content .= "\n"; foreach ($grid as $name => $value) { $content .= "@grid-{$name}: {$value};\n"; } } $headings = Moto\Website\Settings::get('theme_headings'); if (is_object($headings)) { $content .= "\n"; foreach ($headings as $name => $value) { $content .= "@spacing_{$name}: {$value};\n"; } } Moto\Util::filePutContents(Moto\System::getAbsolutePath('@userLessDir/variables/website.less'), $content); } public static function buildColorTheme($event = null) { $colors = Moto\Website\Settings::get('colors'); if (is_string($colors)) { $colors = json_decode($colors, true); } $twig = Moto\Render::getInstance('less'); $content = $twig->render('@lessTemplates/variables/colorizer.less.twig', array( 'colors' => $colors )); Moto\Util::filePutContents(Moto\System::getAbsolutePath('@userLessDir/variables/colorizer.less'), $content); } public static function buildStyles($event = null) { $twig = Moto\Render::getInstance('less'); $table = new Moto\Application\Styles\StylesTable(); $table->useResultAsModel(true); $items = $table->getList(); $content = $twig->render('@lessTemplates/styler.less.twig', array( 'items' => $items['records'] )); Moto\Util::filePutContents(Moto\System::getAbsolutePath('@userLessDir/styler.less'), $content); } public static function buildPresets($event = null) { $content = ''; if (!Moto\Features::isEnabled('theme_presets')) { Moto\Util::filePutContents(Moto\System::getAbsolutePath('@userLessDir/presets.less'), $content); return; } $twig = Moto\Render::getInstance('less'); $twig->addGlobal('FEATURES', Moto\Features::getList()); $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(true); $items = $table->getList(); if (is_array($items['records']) && count($items['records'])) { $content = $twig->render('@lessTemplates/presets.less.twig', array( 'items' => $items['records'] )); } Moto\Util::filePutContents(Moto\System::getAbsolutePath('@userLessDir/presets.less'), $content); } public static function buildLess($event = false) { if ($event instanceof \Zend\EventManager\Event) { $useDeferred = ($event->getName() !== Moto\Hook::SYSTEM_SHUTDOWN); } else { $useDeferred = ($event !== true); } if ($useDeferred) { Moto\Hook::once(Moto\Hook::SYSTEM_SHUTDOWN, 'Moto\System\Style::buildLess'); return; } try { require_once 'Lessphp/lessc.inc.php'; $lessc = new \lessc(); $lessc->setImportDir(Moto\Config::get('rootPath')); if (Moto\System::getStage() != Moto\System::ENV_DEVELOPMENT) { $lessc->setFormatter('compressed'); } if (Moto\System::getPath('systemWebsiteStyleLessDir')) { $lessFilePath = Moto\System::getAbsolutePath('@systemWebsiteStyleLessDir/style.less'); } else { $lessFilePath = Moto\System::getAbsolutePath('@systemIncludes/templates/less/website/style.less'); } if (defined('Moto\Hook::BOOTSTRAPPED_LESS_COMPILER')) { Moto\Hook::trigger(Moto\Hook::BOOTSTRAPPED_LESS_COMPILER, $lessc); } $css = $lessc->compileFile($lessFilePath); Moto\Util::filePutContents(Moto\System::getAbsolutePath('@userStylesFile'), $css); if (defined('Moto\Hook::WEBSITE_STYLES_FILE_SAVED')) { Moto\Hook::trigger(Moto\Hook::WEBSITE_STYLES_FILE_SAVED, '@userStylesFile'); } } catch (\Exception $e) { Moto\System\Log::error('ERROR_ON_BUILD_LESS', array('code' => $e->getCode(), 'message' => $e->getMessage())); } } } 