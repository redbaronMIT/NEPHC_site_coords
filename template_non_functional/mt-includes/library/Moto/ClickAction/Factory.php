<?php
namespace Moto\ClickAction; use Moto; use Zend\Json\Json; use Zend\Stdlib\ArrayUtils; class Factory { protected static $_cache = array(); protected static $_actions = array( 'none' => array( 'name' => 'none', 'filter' => 'Moto\InputFilter\ClickAction\None', 'validator' => 'Moto\InputFilter\ClickAction\None', 'renderClass' => 'Moto\ClickAction\None', ), 'home_page' => array( 'name' => 'home_page', 'filter' => 'Moto\InputFilter\ClickAction\HomePage', 'validator' => 'Moto\InputFilter\ClickAction\HomePage', 'renderClass' => 'Moto\ClickAction\HomePage', ), 'page' => array( 'name' => 'page', 'filter' => 'Moto\InputFilter\ClickAction\Page', 'validator' => 'Moto\InputFilter\ClickAction\Page', 'renderClass' => 'Moto\ClickAction\Page', ), 'popup' => array( 'name' => 'popup', 'filter' => 'Moto\InputFilter\ClickAction\Popup', 'validator' => 'Moto\InputFilter\ClickAction\Popup', 'renderClass' => 'Moto\ClickAction\Popup', ), 'url' => array( 'name' => 'url', 'filter' => 'Moto\InputFilter\ClickAction\Url', 'validator' => 'Moto\InputFilter\ClickAction\Url', 'renderClass' => 'Moto\ClickAction\Url', ), 'mail' => array( 'name' => 'mail', 'filter' => 'Moto\InputFilter\ClickAction\Mail', 'validator' => 'Moto\InputFilter\ClickAction\Mail', 'renderClass' => 'Moto\ClickAction\Mail', ), 'call' => array( 'name' => 'call', 'filter' => 'Moto\InputFilter\ClickAction\Call', 'validator' => 'Moto\InputFilter\ClickAction\Call', 'renderClass' => 'Moto\ClickAction\Call', ), 'lightbox' => array( 'name' => 'lightbox', 'filter' => 'Moto\InputFilter\ClickAction\Lightbox', 'validator' => 'Moto\InputFilter\ClickAction\Lightbox', 'renderClass' => 'Moto\ClickAction\Lightbox', ), 'file' => array( 'name' => 'file', 'filter' => 'Moto\InputFilter\ClickAction\File', 'validator' => 'Moto\InputFilter\ClickAction\File', 'renderClass' => 'Moto\ClickAction\File', ), 'blog.index' => array( 'isAlias' => true, 'alias' => 'page', ), 'blog.post' => array( 'isAlias' => true, 'alias' => 'page', ), 'blog.tag' => array( 'isAlias' => true, 'alias' => 'taxonomy', ), 'blog.category' => array( 'isAlias' => true, 'alias' => 'taxonomy', ), 'taxonomy' => array( 'name' => 'taxonomy', 'filter' => 'Moto\InputFilter\ClickAction\Taxonomy', 'validator' => 'Moto\InputFilter\ClickAction\Taxonomy', 'renderClass' => 'Moto\ClickAction\Taxonomy', ), ); protected static $_inputFilters = array(); protected static $_inputValidators = array(); protected static $_initialized = false; public static function init() { if (static::$_initialized) { return; } static::$_initialized = true; Moto\Hook::trigger(__CLASS__ . ': bootstrapped'); } public static function getActionOptions($name, $default = null) { return (array_key_exists($name, static::$_actions) ? static::$_actions[$name] : $default); } public static function getResolvedActionOptions($name, $result = null) { $result = static::getActionOptions($name); if (Moto\Util::getFrom($result, 'isAlias', false)) { $result = static::getResolvedActionOptions(Moto\Util::getFrom($result, 'alias')); } return $result; } public static function setClickActionAlias($alias, $action) { $options = Moto\Util::getFrom(static::$_actions, $alias, array()); $options['isAlias'] = true; $options['alias'] = $action; $options['name'] = $alias; static::$_actions[$alias] = $options; } public static function isAlias($action) { $options = static::getActionOptions($action); return !!Moto\Util::getFrom($options, 'isAlias', false); } public static function setClickAction($name, $options = array()) { if (!is_string($name) || !is_array($options)) { return false; } $options['name'] = $name; $options['isAlias'] = false; $options['renderClass'] = trim(Moto\Util::getFrom($options, 'renderClass', '')); static::$_actions[$name] = $options; return true; } public static function isExists($action) { return array_key_exists($action, static::$_actions); } protected static function _getInputCallbackHandler($name, $type) { $options = static::getResolvedActionOptions($name); $handler = Moto\Util::getFrom($options, $type); if (!is_callable($handler)) { if (is_string($handler)) { $handler = trim($handler); if (!empty($handler) && class_exists($handler)) { $handler = new $handler(); } } } return $handler; } public static function getFilter($name) { return static::_getInputCallbackHandler($name, 'filter'); } public static function getValidator($name) { return static::_getInputCallbackHandler($name, 'validator'); } protected static function _getCacheKey($action, $options) { $action = strtolower($action); $key = $action . '_'; $key .= json_encode($options); return $key; } public static function create($action, $properties = array()) { static::init(); if (is_array($action)) { $properties = Moto\Util::getFrom($action, 'properties', array()); $action = Moto\Util::getFrom($action, 'action', 'none'); } if (is_string($properties)) { $properties = json_decode($properties, true); } if (empty($properties)) { $properties = array(); } return static::_createCached($action, $properties); } protected static function _createCached($action, $properties) { $cacheKey = static::_getCacheKey($action, $properties); if (!isset(static::$_cache[$cacheKey])) { static::$_cache[$cacheKey] = static::_create($action, $properties); } return static::$_cache[$cacheKey]; } protected static function _create($action, $properties) { $clickActionObject = null; $actionOptions = static::getResolvedActionOptions($action); $class = Moto\Util::getFrom($actionOptions, 'renderClass', ''); if (!is_string($class)) { $class = ''; } if (is_array($properties)) { $properties['action'] = $action; } if (!empty($class) && class_exists($class)) { $clickActionObject = new $class($properties); } else { $clickActionObject = new Moto\ClickAction\AbstractClickAction($properties); } return $clickActionObject; } public static function exportClickAction($clickAction) { $data = $clickAction->getData(); if (is_array($data)) { unset($data['action']); } $result = array( 'action' => $clickAction->get('action'), ); if (!empty($data)) { $result['properties'] = $data; } return $result; } } 