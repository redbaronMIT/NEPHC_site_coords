<?php
namespace Moto\Http; use Exception; use Moto; use Zend\Http; use Zend\Http\Request; use Zend\Http\Response; use Zend\Stdlib\ArrayUtils; class Client extends Http\Client { protected $_defaultCurlOptions = array( CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_0, CURLOPT_HEADER => 0, CURLOPT_SSL_VERIFYHOST => 0, CURLOPT_SSL_VERIFYPEER => false, CURLOPT_RETURNTRANSFER => true, CURLOPT_CONNECTTIMEOUT => 10, CURLOPT_TIMEOUT => 20, CURLOPT_PROXY => '' ); protected $_messageKeys = array( 400 => 'bad_request', 403 => 'forbidden', 404 => 'not_found', 408 => 'timeout', 500 => 'internal_server_error' ); protected $_response = null; protected $_tempStream = array(); public function __construct($uri = null, $options = array()) { $defaultSettings = Moto\Config::get('httpClient.settings'); if (!is_array($defaultSettings)) { $defaultSettings = array(); } if (!isset($options['adapter'])) { $options['adapter'] = 'Zend\Http\Client\Adapter\Curl'; } if ($options['adapter'] === 'Zend\Http\Client\Adapter\Curl') { if (!isset($options['curloptions'])) { $options['curloptions'] = array(); } $curlOptions = Moto\Util::getValue($defaultSettings, 'curlOptions'); if (!is_array($curlOptions)) { $curlOptions = array(); } $curlOptions = ArrayUtils::merge($this->_defaultCurlOptions, $curlOptions, true); if (array_key_exists('connectionTimeout', $defaultSettings)) { $curlOptions[CURLOPT_CONNECTTIMEOUT] = (int) $defaultSettings['connectionTimeout']; } if (array_key_exists('executionTimeout', $defaultSettings)) { $curlOptions[CURLOPT_TIMEOUT] = (int) $defaultSettings['executionTimeout']; } $options['curloptions'] = ArrayUtils::merge($curlOptions, $options['curloptions'], true); $useProxy = Moto\Config::get('proxy.enabled', false); if ($useProxy) { $options = ArrayUtils::merge($options, array( 'proxyhost' => Moto\Config::get('proxy.host'), 'proxyport' => Moto\Config::get('proxy.port'), 'proxyuser' => Moto\Config::get('proxy.user'), 'proxypass' => Moto\Config::get('proxy.pass') )); } } if (!isset($options['argseparator'])) { $options['argseparator'] = '&'; } if (isset($options['streamtmpdir'])) { $tempDir = trim((string) $options['streamtmpdir']); } else { $tempDir = trim((string) Moto\Util::getValue($defaultSettings, 'tempDir', '')); } if ($tempDir === '') { $tempDir = '@temp'; } $tempDir = Moto\System::getAbsolutePath($tempDir); if (!file_exists($tempDir)) { Moto\Util::createDir($tempDir); } $options['streamtmpdir'] = $tempDir; parent::__construct($uri, $options); } public function send(Request $request = null) { try { $this->_response = parent::send($request); } catch (Exception $e) { $this->_response = $e; } return $this->_response; } public function hasErrors() { $hasErrors = false; if (!is_null($this->_response)) { $hasErrors = ($this->_response instanceof Response) ? !$this->_response->isSuccess() : true; } return $hasErrors; } public function getErrors() { $errors = array(); if ($this->hasErrors()) { $code = 400; $message = 'Unknown error'; if ($this->_response instanceof Response) { $code = $this->_response->getStatusCode(); } else { if ($this->_response instanceof Exception) { $code = $this->_response->getCode(); $message = $this->_response->getMessage(); } } $key = isset($this->_messageKeys[$code]) ? $this->_messageKeys[$code] : 'bad_request'; $errors = array( array( 'key' => isset($this->_messageKeys[$code]) ? $this->_messageKeys[$code] : 'bad_request', 'code' => $code, 'message' => $message ) ); } return $errors; } protected function openTempStream() { $fp = parent::openTempStream(); $this->_tempStream[] = $fp; return $fp; } protected function _cleanTempFiles() { foreach ($this->_tempStream as $file) { if (!is_resource($file)) { continue; } $info = stream_get_meta_data($file); @fclose($file); if (file_exists($info['uri'])) { @unlink($info['uri']); } } $this->_tempStream = array(); } public function __destruct() { $this->_cleanTempFiles(); } }