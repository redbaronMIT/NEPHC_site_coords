<?php
namespace Moto\Database; use Moto; use Illuminate; use Zend; class Provider { protected static $_initialized = false; protected static $_schemaBuilder; protected static $_databaseCapsule; public static function getDatabaseCapsule() { if (!static::$_databaseCapsule) { static::$_databaseCapsule = new Illuminate\Database\Capsule\Manager(); static::$_databaseCapsule->setAsGlobal(); } return static::$_databaseCapsule; } public static function initEloquent(Zend\Db\Adapter\Adapter $ZendAdapter, $databaseConfig = null) { if (static::$_initialized) { return false; } if (!is_array($databaseConfig)) { $databaseConfig = Moto\Config::get('database'); } if (!is_array($databaseConfig)) { throw new Moto\Exception('Bad database config, must be array'); } if (empty($databaseConfig['hostname'])) { throw new Moto\Exception('Config parameters "hostname" is empty'); } if (empty($databaseConfig['database'])) { throw new Moto\Exception('Config parameters "database" is empty'); } $charset = Moto\Util::getValue($databaseConfig, 'charset', 'utf8'); $config = [ 'driver' => 'mysql', 'host' => $databaseConfig['hostname'], 'database' => $databaseConfig['database'], 'username' => Moto\Util::getValue($databaseConfig, 'username', ''), 'password' => Moto\Util::getValue($databaseConfig, 'password', ''), 'charset' => $charset, 'prefix' => Moto\Util::getValue($databaseConfig, 'prefix', ''), 'collation' => $charset . '_unicode_ci', ]; $PDOConnection = $ZendAdapter->getDriver()->getConnection()->getResource(); $capsule = static::getDatabaseCapsule(); $databaseManager = $capsule->getDatabaseManager(); $databaseManager->extend('default', function ($config, $name) use ($PDOConnection) { return new Illuminate\Database\MySqlConnection($PDOConnection, $config['database'], $config['prefix'], $config); }); $capsule->addConnection($config); $capsule->setEventDispatcher(new Illuminate\Events\Dispatcher(new Illuminate\Container\Container)); $capsule->bootEloquent(); static::$_initialized = true; return true; } public static function getSchemaBuilder() { if (!static::$_initialized) { throw new Moto\Exception('Eloquent not initialized'); } if (!static::$_schemaBuilder) { static::$_schemaBuilder = Illuminate\Database\Capsule\Manager::schema(); } return static::$_schemaBuilder; } } class ContentTaxonomy extends Moto\Database\BaseModel { protected $table = 'content_taxonomies'; protected $morphClass = '@ContentTaxonomy'; protected $fillable = [ 'name', 'slug', 'type', 'attraction_level', 'parent_id', 'group_id', 'short_description', 'long_description', 'properties', ]; protected $casts = [ 'id' => 'int', 'name' => 'string', 'slug' => 'string', 'type' => 'string', 'assigned_count' => 'int', 'attraction_level' => 'int', 'parent_id' => 'int', 'group_id' => 'int', 'short_description' => 'string', 'long_description' => 'string', 'properties' => 'object', ]; protected $attributes = [ 'name' => '', 'slug' => '', 'type' => '', 'assigned_count' => 0, 'attraction_level' => 0, 'parent_id' => 0, 'group_id' => 0, 'short_description' => '', 'long_description' => '', 'properties' => '{}', ]; protected $visible = [ ]; protected $hidden = [ 'pivot', ]; protected $dates = [ ]; public function pages() { return $this->belongsToMany('Moto\Database\Page', 'content_taxonomy_relations', 'taxonomy_id', 'target_id'); } public function getAbsoluteUrl($query = null) { $url = Moto\Website\BlogApplication::getAbsoluteUrl($this); if (!empty($query)) { $url = Moto\Util::extendUrl($url, array('query' => $query), array('query' => 'join')); } return $url; } public function getRelativeUrl($query = null) { $url = Moto\Website\BlogApplication::getRelativeUrl($this); if (!empty($query)) { $url = Moto\Util::extendUrl($url, array('query' => $query), array('query' => 'join')); } return $url; } } class ContentTaxonomyBlogTag extends Moto\Database\ContentTaxonomy { protected $morphClass = '@ContentTaxonomyBlogTag'; protected $fillable = [ 'name', 'slug', 'short_description', 'long_description', 'properties', ]; protected $attributes = [ 'name' => '', 'slug' => '', 'type' => 'blog.tag', 'assigned_count' => 0, 'short_description' => '', 'long_description' => '', 'properties' => '{}', ]; public static function boot() { parent::boot(); static::addGlobalScope(new Scope\SimpleGlobalScope(function($builder, $model) { $builder->where('type', '=', 'blog.tag'); })); static::deleted(function ($model) { $model->pages()->detach(); }); } public function pages() { return $this->belongsToMany('Moto\Database\Page', 'content_taxonomy_relations', 'taxonomy_id', 'target_id'); } public function blogPosts() { return $this->pages()->where('pages.type', '=', 'blog.post'); } } class ContentTaxonomyBlogCategory extends Moto\Database\ContentTaxonomy { protected $morphClass = '@ContentTaxonomyBlogCategory'; protected $fillable = [ 'name', 'slug', 'short_description', 'long_description', 'properties', ]; protected $attributes = [ 'name' => '', 'slug' => '', 'type' => 'blog.category', 'assigned_count' => 0, 'short_description' => '', 'long_description' => '', 'properties' => '{}', ]; public static function boot() { parent::boot(); static::addGlobalScope(new Scope\SimpleGlobalScope(function($builder, $model) { $builder->where('type', '=', 'blog.category'); })); static::deleted(function ($model) { $model->pages()->update(['category_id' => null]); }); } public function pages() { return $this->hasMany('Moto\Database\Page', 'category_id', 'id'); } public function blogPosts() { return $this->pages()->where('pages.type', '=', 'blog.post'); } } class Page extends Moto\Database\BaseModel { const CREATED_AT = 'created'; const UPDATED_AT = 'modified'; protected $table = 'pages'; protected $morphClass = '@Page'; protected $fillable = [ ]; protected $casts = [ 'id' => 'int', 'author_id' => 'int', 'parent_id' => 'int', 'category_id' => 'int', 'is_system' => 'int', 'properties' => 'object', 'layout' => 'object', ]; protected $attributes = [ ]; protected $visible = [ 'id', 'name', 'url', 'title', 'author_id', 'parent_id', 'category_id', 'is_system', 'content', 'type', 'status', 'visibility', 'properties', 'layout', 'styles', 'background', 'background_id', 'short_description', 'published', 'modified', 'created', 'tags', 'category', ]; protected $hidden = [ 'pivot', ]; protected $dates = [ 'published', ]; public static function boot() { parent::boot(); static::deleted(function ($model) { $model->tags()->detach(); }); } public function tags() { return $this->belongsToMany('Moto\Database\ContentTaxonomyBlogTag', 'content_taxonomy_relations', 'target_id', 'taxonomy_id'); } public function category() { return $this->belongsTo('Moto\Database\ContentTaxonomyBlogCategory', 'category_id', 'id'); } } 